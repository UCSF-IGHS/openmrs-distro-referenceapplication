name: OHRI refapp with O3 Images

on:
  push:
    branches:
      - dev-staging
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker_setup:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' ||  github.event.pull_request.merged) 

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  docker_staging_frontend:
    runs-on: ubuntu-latest
    needs: docker_setup

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-staging-frontend:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-staging-frontend:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  docker_staging_backend:
    runs-on: ubuntu-latest
    needs: docker_setup

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-staging-backend-refapp:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-staging-backend-refapp:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  docker_refapp_staging_deploy:

    runs-on: ubuntu-latest

    needs:
      - docker_staging_frontend
      - docker_staging_backend
    if: needs.docker_staging_frontend.result == 'success' || needs.docker_staging_backend.result == 'success'
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HISTAC_DEV_STAGING_HOST }}
          username: ${{ secrets.HISTAC_DEV_STAGING_USERNAME }}
          key: ${{ secrets.HISTAC_DEV_STAGING_KEY }}
          port: ${{ secrets.HISTAC_DEV_STAGING_PORT }}
          script: cd /opt && docker compose -f docker-compose-openmrs-referenceapplication.yml stop && docker compose -f docker-compose-openmrs-referenceapplication.yml pull && docker compose -f docker-compose-openmrs-referenceapplication.yml up -d
