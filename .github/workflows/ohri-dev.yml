name: OHRI Dev with O3 Images

on:
  push:
    branches:
      - dev
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker_setup:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' ||  github.event.pull_request.merged) 

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  docker_staging_backend:
    runs-on: ubuntu-latest
    needs: docker_setup 

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-backend-2_6:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-backend-2_6:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  docker_staging_frontend:
    runs-on: ubuntu-latest
    needs: docker_setup

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-frontend:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-frontend:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  docker_staging_gateway:
    runs-on: ubuntu-latest
    needs: docker_setup 
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./gateway
          file: ./gateway/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-proxy:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-proxy:ci_${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save image digest
        run: echo "::set-output name=image::${{ steps.build-and-push.output.digest }}"

  dev_server_status:
    if: github.ref == 'refs/heads/dev' 
    runs-on: ubuntu-latest
    needs: docker_staging_backend

    steps:
      - name: Wait for 5 minutos - Let Images reflect on Docker Hub
        run: sleep 300
      - name: Checkout repository
        uses: actions/checkout@v3  

      - name: Copy files to /home/runner/
        run: |
          ls -la -t
          cp -r $GITHUB_WORKSPACE/.github/.ssh/ /home/runner/

      - name: List contents of /home/runner/
        run: ls -la /home/runner/

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.LL_SSH_PRIVATE_KEY }}

      - name: Check SSH to remote OHRI Dev status
        run: |
            ssh-keygen -R 172.19.0.16      
            
  dev_server_connection_dev:
      runs-on: ubuntu-latest
      needs: dev_server_status
      steps:      
        - name: SSH to remote OHRI Dev server 
          run: | 
            ssh -o StrictHostKeyChecking=no -T llemos@172.19.0.16 -p 2216 -J llemos@20.172.182.46 -p 2202
            ls -la -t  && \
            cd /opt && \
            ls -la -t 
        
  dev_deploy:
    runs-on: ubuntu-latest
    needs: dev_server_status

    if: (github.event_name == 'push' ||  github.event.pull_request.merged) 
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0

        with:
          ssh-private-key: ${{ secrets.LL_SSH_PRIVATE_KEY }}

      - name: SSH to remote OHRI Dev server via jump host
        run: |
          ssh -p 2216 \
              -o "UserKnownHostsFile=/dev/null" \
              -o "StrictHostKeyChecking=no" \
              -o "ProxyCommand=ssh -o StrictHostKeyChecking=no -W %h:%p llemos@20.172.182.46 -p 2202" \
              llemos@172.19.0.16 "\
              cd /opt && \
              docker compose -f docker-compose-ohri-dev.yml pull && \
              docker compose -f docker-compose-ohri-dev.yml stop && \
              docker compose -f docker-compose-ohri-dev.yml up -d"
          